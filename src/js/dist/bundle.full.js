!function(n){var B={};function I(i){if(B[i])return B[i].exports;var Q=B[i]={i:i,l:!1,exports:{}};return n[i].call(Q.exports,Q,Q.exports,I),Q.l=!0,Q.exports}I.m=n,I.c=B,I.d=function(n,B,i){I.o(n,B)||Object.defineProperty(n,B,{enumerable:!0,get:i})},I.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},I.t=function(n,B){if(1&B&&(n=I(n)),8&B)return n;if(4&B&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(I.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&B&&"string"!=typeof n)for(var Q in n)I.d(i,Q,function(B){return n[B]}.bind(null,Q));return i},I.n=function(n){var B=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(B,"a",B),B},I.o=function(n,B){return Object.prototype.hasOwnProperty.call(n,B)},I.p="",I(I.s=98)}({12:function(module,exports){eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcz85NTIzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},98:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\nvar defineProperty = __webpack_require__(12);\nvar defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);\n\n// CONCATENATED MODULE: ./src/Public/analytics.js\n\n\n/**\n * A collection of functions and logic to handle sending of entity data to an\n * external analytics tracker.\n *\n * Objects: `ga`, `__gaTracker` are supported as is `gtag`.\n *\n * NOTE: the `__gaTracker` object is a common remap name in WordPress.\n */\n(function () {\n  // Only run after page has loaded.\n  document.addEventListener("DOMContentLoaded", function (event) {\n    // We should have an entity object by here but if not short circuit.\n    if (typeof wordliftAnalyticsEntityData === "undefined") {\n      return;\n    }\n    /**\n     * Promise to handle detection and return of an analytics object.\n     *\n     * @type {Promise}\n     */\n\n\n    var detectAnalyticsObject = new Promise(function (resolve, reject) {\n      var analyticsObj = getAnalyticsObject();\n      return resolve(analyticsObj);\n    });\n    /**\n     * A function returning the promise that deals with creating items\n     * to send and passing them to the correct send function.\n     *\n     * @method\n     * @param  {object} analyticsObj an analytics tracking object that is the resolve of the detect function.\n     * @return {Promise}\n     */\n\n    var sendAnalyticsData = function sendAnalyticsData(analyticsObj) {\n      return new Promise(function (resolve, reject) {\n        // if we dont have an object to push into and an object\n        // with config then this is a failure - reject.\n        if ("undefined" === typeof analyticsObj || "undefined" === typeof wordliftAnalyticsConfigData) {\n          return reject();\n        } // setup the custom dimention names.\n\n\n        var dimX = "dimension" + wordliftAnalyticsConfigData.entity_uri_dimension;\n        var dimY = "dimension" + wordliftAnalyticsConfigData.entity_type_dimension; // Create an array of all the individual entities.\n\n        var entities = [];\n\n        for (var key in wordliftAnalyticsEntityData) {\n          if (wordliftAnalyticsEntityData.hasOwnProperty(key)) {\n            entities.push(wordliftAnalyticsEntityData[key]);\n          }\n        } // Count the total entities we have to send.\n\n\n        var entitiesTotal = entities.length; // console.log( `Going to send analytics events using ${analyticsObj.__wl_type} object type.` );\n\n        /**\n         * Depending on the tracking object type send the data\n         * to the correspending service.\n         */\n\n        if ("ga" === analyticsObj.__wl_type) {\n          // This is `ga` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGaEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } else if ("gtag" === analyticsObj.__wl_type) {\n          // This is `gtag` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGtagEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } else if ("gtm" === analyticsObj.__wl_type) {\n          // This is `gtag` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGtmEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } // @TODO handle failure.\n        // resolve to finish.\n\n\n        return resolve(true);\n      });\n    }; // Fire off the promise chain to detect and send analytics data.\n\n\n    detectAnalyticsObject.then(function (analyticsObj) {\n      return sendAnalyticsData(analyticsObj);\n    });\n  });\n  /**\n   * Detects and returns a supported analytics object if one exists.\n   *\n   * @method getAnalyticsObject\n   * @return {object|bool}\n   */\n\n  function getAnalyticsObject() {\n    var obj = false; // detect GTAG, GTM, GA in that order.\n\n    if (window.gtag) {\n      obj = window.gtag;\n      obj.__wl_type = "gtag";\n    } else if (window.dataLayer) {\n      obj = window.dataLayer;\n      obj.__wl_type = "gtm";\n    } else if (window.ga) {\n      obj = window.ga;\n      obj.__wl_type = "ga";\n    } else if (window.__gaTracker) {\n      obj = window.__gaTracker;\n      obj.__wl_type = "ga";\n    } // console.log( `Found a ${obj.__wl_type} analytics object.` );\n\n\n    return obj;\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to ga style tracker.\n   *\n   * @method sendGaEvent\n   * @param  {ga} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGaEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    var _analyticsObj;\n\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    }\n\n    analyticsObj("send", "event", "WordLift", "Mentions", label, 1, (_analyticsObj = {}, defineProperty_default()(_analyticsObj, dimX, uri), defineProperty_default()(_analyticsObj, dimY, type), defineProperty_default()(_analyticsObj, "nonInteraction", true), _analyticsObj));\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to gtag.\n   *\n   * @method sendGtagEvent\n   * @param  {gtag} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGtagEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    var _analyticsObj2;\n\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    } // console.log("Sending gtag event ...");\n\n\n    analyticsObj("event", "Mentions", (_analyticsObj2 = {\n      event_category: "WordLift",\n      event_label: label,\n      value: 1\n    }, defineProperty_default()(_analyticsObj2, dimX, uri), defineProperty_default()(_analyticsObj2, dimY, type), defineProperty_default()(_analyticsObj2, "non_interaction", true), _analyticsObj2));\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to gtag.\n   *\n   * @method sendGtagEvent\n   * @param  {gtag} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGtmEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    } // console.log("Sending gtm event...");\n\n\n    analyticsObj.push({\n      "event": "Mentions",\n      "wl_event_action": "Mentions",\n      "wl_event_category": "WordLift",\n      "wl_event_label": label,\n      "wl_event_value": 1,\n      "wl_event_uri": uri,\n      "wl_index_uri": dimX.replace(/^\\D+/g, \'\'),\n      "wl_event_type": type,\n      "wl_index_type": dimY.replace(/^\\D+/g, \'\'),\n      "non_interaction": true\n    });\n  }\n})();\n// CONCATENATED MODULE: ./src/Public/index.js\n/**\n * Internal dependencies.\n */\n // Set a reference to the WordLift settings.\n\nvar settings = window.wlSettings;\n/**\n * Build the request URL, inclusive of the query string parameters.\n *\n * @since 3.19.1\n *\n * @param params {{jsonld_url, postId, isHome}} The query parameters.\n * @returns {string} The request URl.\n */\n\nvar buildUrl = function buildUrl(params) {\n  // Join with `?` or `&`.\n  // const joinChar = 0 <= params.apiUrl.indexOf("?") ? "&" : "?";\n  // Build the URL\n  var url = params[\'jsonld_url\'] + ("undefined" !== typeof params.isHome ? 0 : params.postId); // params[\'jsonld_url\'] +\n  // // joinChar +\n  // // "action=wl_jsonld" +\n  // // Append the post id parameter.\n  // ("undefined" !== typeof params.postId ? "&id=" + params.postId : "") +\n  // // Append the homepage parameter.\n  // ("undefined" !== typeof params.isHome ? "&homepage=true" : "");\n\n  return url;\n};\n/**\n * Load the JSON-LD.\n *\n * @since 3.0.0\n */\n\n\nvar loadJsonLd = function loadJsonLd() {\n  // Bail out it the container doesn\'t now about fetch.\n  if ("undefined" === typeof fetch) return; // Check if the JSON-LD is disabled, i.e. if there\'s a `jsonld_enabled`\n  // setting explicitly defined with a value different from \'1\'.\n\n  if ("undefined" !== typeof settings["jsonld_enabled"] && "1" !== settings["jsonld_enabled"]) {\n    return;\n  } // Check that we have a post id or it\'s homepage, otherwise exit.\n\n\n  if ("undefined" === typeof settings.postId && "undefined" === typeof settings.isHome) {\n    return;\n  } // Get the request URL.\n\n\n  var url = buildUrl(settings); // Finally fetch the URL.\n  //\n  // DO NOT use here `new URL(...)` / `URL.searchParams`: Google SDTT doesn\'t understand them.\n\n  fetch(url).then(function (response) {\n    return response.text();\n  }).then(function (body) {\n    // Use `document.createElement`. See https://github.com/insideout10/wordlift-plugin/issues/810.\n    var script = document.createElement("script");\n    script.type = "application/ld+json";\n    script.innerText = body;\n    document.head.appendChild(script);\n  });\n};\n\nloadJsonLd(); //\n// window.addEventListener("load", loadJsonLd);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUHVibGljL2FuYWx5dGljcy5qcz85NWZiIiwid2VicGFjazovLy8uL3NyYy9QdWJsaWMvaW5kZXguanM/ODFiYSJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIndvcmRsaWZ0QW5hbHl0aWNzRW50aXR5RGF0YSIsImRldGVjdEFuYWx5dGljc09iamVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYW5hbHl0aWNzT2JqIiwiZ2V0QW5hbHl0aWNzT2JqZWN0Iiwic2VuZEFuYWx5dGljc0RhdGEiLCJ3b3JkbGlmdEFuYWx5dGljc0NvbmZpZ0RhdGEiLCJkaW1YIiwiZW50aXR5X3VyaV9kaW1lbnNpb24iLCJkaW1ZIiwiZW50aXR5X3R5cGVfZGltZW5zaW9uIiwiZW50aXRpZXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJlbnRpdGllc1RvdGFsIiwibGVuZ3RoIiwiX193bF90eXBlIiwiaSIsInNlbmRHYUV2ZW50IiwibGFiZWwiLCJ1cmkiLCJ0eXBlIiwic2VuZEd0YWdFdmVudCIsInNlbmRHdG1FdmVudCIsInRoZW4iLCJvYmoiLCJ3aW5kb3ciLCJndGFnIiwiZGF0YUxheWVyIiwiZ2EiLCJfX2dhVHJhY2tlciIsImV2ZW50X2NhdGVnb3J5IiwiZXZlbnRfbGFiZWwiLCJ2YWx1ZSIsInJlcGxhY2UiLCJzZXR0aW5ncyIsIndsU2V0dGluZ3MiLCJidWlsZFVybCIsInBhcmFtcyIsInVybCIsImlzSG9tZSIsInBvc3RJZCIsImxvYWRKc29uTGQiLCJmZXRjaCIsInJlc3BvbnNlIiwidGV4dCIsImJvZHkiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJUZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFTQSxDQUFDLFlBQVc7QUFDVjtBQUNBQSxVQUFRLENBQUNDLGdCQUFULENBQTBCLGtC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Q0FDS2YsSUFETCxDQUNVLFVBQVVvQixRQUFWLEVBQW9CO0FBQ3RCLFdBQU9BLFFBQVEsQ0FBQ0MsSUFBVCxFQUFQO0FBQ0gsR0FITCxFQUlLckIsSUFKTCxDQUlVLFVBQVVzQixJQUFWLEVBQWdCO0FBQ2xCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHckQsUUFBUSxDQUFDc0QsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0FELFVBQU0sQ0FBQzFCLElBQVAsR0FBYyxxQkFBZDtBQUNBMEIsVUFBTSxDQUFDRSxTQUFQLEdBQW1CSCxJQUFuQjtBQUNBcEQsWUFBUSxDQUFDd0QsSUFBVCxDQUFjQyxXQUFkLENBQTBCSixNQUExQjtBQUNILEdBVkw7QUFXSCxDQXRDRDs7QUF3Q0FMLFVBQVUsRyxDQUVWO0FBQ0EiLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgYW5kIGxvZ2ljIHRvIGhhbmRsZSBzZW5kaW5nIG9mIGVudGl0eSBkYXRhIHRvIGFuXG4gKiBleHRlcm5hbCBhbmFseXRpY3MgdHJhY2tlci5cbiAqXG4gKiBPYmplY3RzOiBgZ2FgLCBgX19nYVRyYWNrZXJgIGFyZSBzdXBwb3J0ZWQgYXMgaXMgYGd0YWdgLlxuICpcbiAqIE5PVEU6IHRoZSBgX19nYVRyYWNrZXJgIG9iamVjdCBpcyBhIGNvbW1vbiByZW1hcCBuYW1lIGluIFdvcmRQcmVzcy5cbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gIC8vIE9ubHkgcnVuIGFmdGVyIHBhZ2UgaGFzIGxvYWRlZC5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBXZSBzaG91bGQgaGF2ZSBhbiBlbnRpdHkgb2JqZWN0IGJ5IGhlcmUgYnV0IGlmIG5vdCBzaG9ydCBjaXJjdWl0LlxuICAgIGlmICh0eXBlb2Ygd29yZGxpZnRBbmFseXRpY3NFbnRpdHlEYXRhID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvbWlzZSB0byBoYW5kbGUgZGV0ZWN0aW9uIGFuZCByZXR1cm4gb2YgYW4gYW5hbHl0aWNzIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQcm9taXNlfVxuICAgICAqL1xuICAgIHZhciBkZXRlY3RBbmFseXRpY3NPYmplY3QgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBhbmFseXRpY3NPYmogPSBnZXRBbmFseXRpY3NPYmplY3QoKTtcbiAgICAgIHJldHVybiByZXNvbHZlKGFuYWx5dGljc09iaik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgcHJvbWlzZSB0aGF0IGRlYWxzIHdpdGggY3JlYXRpbmcgaXRlbXNcbiAgICAgKiB0byBzZW5kIGFuZCBwYXNzaW5nIHRoZW0gdG8gdGhlIGNvcnJlY3Qgc2VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAcGFyYW0gIHtvYmplY3R9IGFuYWx5dGljc09iaiBhbiBhbmFseXRpY3MgdHJhY2tpbmcgb2JqZWN0IHRoYXQgaXMgdGhlIHJlc29sdmUgb2YgdGhlIGRldGVjdCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuICAgIHZhciBzZW5kQW5hbHl0aWNzRGF0YSA9IGZ1bmN0aW9uKGFuYWx5dGljc09iaikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBpZiB3ZSBkb250IGhhdmUgYW4gb2JqZWN0IHRvIHB1c2ggaW50byBhbmQgYW4gb2JqZWN0XG4gICAgICAgIC8vIHdpdGggY29uZmlnIHRoZW4gdGhpcyBpcyBhIGZhaWx1cmUgLSByZWplY3QuXG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgYW5hbHl0aWNzT2JqIHx8IFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3b3JkbGlmdEFuYWx5dGljc0NvbmZpZ0RhdGEpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXR1cCB0aGUgY3VzdG9tIGRpbWVudGlvbiBuYW1lcy5cbiAgICAgICAgdmFyIGRpbVggPSBcImRpbWVuc2lvblwiICsgd29yZGxpZnRBbmFseXRpY3NDb25maWdEYXRhLmVudGl0eV91cmlfZGltZW5zaW9uO1xuICAgICAgICB2YXIgZGltWSA9IFwiZGltZW5zaW9uXCIgKyB3b3JkbGlmdEFuYWx5dGljc0NvbmZpZ0RhdGEuZW50aXR5X3R5cGVfZGltZW5zaW9uO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBvZiBhbGwgdGhlIGluZGl2aWR1YWwgZW50aXRpZXMuXG4gICAgICAgIHZhciBlbnRpdGllcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gd29yZGxpZnRBbmFseXRpY3NFbnRpdHlEYXRhKSB7XG4gICAgICAgICAgaWYgKHdvcmRsaWZ0QW5hbHl0aWNzRW50aXR5RGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBlbnRpdGllcy5wdXNoKHdvcmRsaWZ0QW5hbHl0aWNzRW50aXR5RGF0YVtrZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3VudCB0aGUgdG90YWwgZW50aXRpZXMgd2UgaGF2ZSB0byBzZW5kLlxuICAgICAgICB2YXIgZW50aXRpZXNUb3RhbCA9IGVudGl0aWVzLmxlbmd0aDtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyggYEdvaW5nIHRvIHNlbmQgYW5hbHl0aWNzIGV2ZW50cyB1c2luZyAke2FuYWx5dGljc09iai5fX3dsX3R5cGV9IG9iamVjdCB0eXBlLmAgKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSB0cmFja2luZyBvYmplY3QgdHlwZSBzZW5kIHRoZSBkYXRhXG4gICAgICAgICAqIHRvIHRoZSBjb3JyZXNwZW5kaW5nIHNlcnZpY2UuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoXCJnYVwiID09PSBhbmFseXRpY3NPYmouX193bF90eXBlKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBgZ2FgIHN0eWxlIG9iamVjdC5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudGl0aWVzVG90YWw7IGkrKykge1xuICAgICAgICAgICAgc2VuZEdhRXZlbnQoYW5hbHl0aWNzT2JqLCBkaW1YLCBkaW1ZLCBlbnRpdGllc1tpXS5sYWJlbCwgZW50aXRpZXNbaV0udXJpLCBlbnRpdGllc1tpXS50eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXCJndGFnXCIgPT09IGFuYWx5dGljc09iai5fX3dsX3R5cGUpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGBndGFnYCBzdHlsZSBvYmplY3QuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRpdGllc1RvdGFsOyBpKyspIHtcbiAgICAgICAgICAgIHNlbmRHdGFnRXZlbnQoYW5hbHl0aWNzT2JqLCBkaW1YLCBkaW1ZLCBlbnRpdGllc1tpXS5sYWJlbCwgZW50aXRpZXNbaV0udXJpLCBlbnRpdGllc1tpXS50eXBlKTtcbiAgICAgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKFwiZ3RtXCIgPT09IGFuYWx5dGljc09iai5fX3dsX3R5cGUpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGBndGFnYCBzdHlsZSBvYmplY3QuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRpdGllc1RvdGFsOyBpKyspIHtcbiAgICAgICAgICAgIHNlbmRHdG1FdmVudChhbmFseXRpY3NPYmosIGRpbVgsIGRpbVksIGVudGl0aWVzW2ldLmxhYmVsLCBlbnRpdGllc1tpXS51cmksIGVudGl0aWVzW2ldLnR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBAVE9ETyBoYW5kbGUgZmFpbHVyZS5cbiAgICAgICAgLy8gcmVzb2x2ZSB0byBmaW5pc2guXG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEZpcmUgb2ZmIHRoZSBwcm9taXNlIGNoYWluIHRvIGRldGVjdCBhbmQgc2VuZCBhbmFseXRpY3MgZGF0YS5cbiAgICBkZXRlY3RBbmFseXRpY3NPYmplY3QudGhlbihhbmFseXRpY3NPYmogPT4gc2VuZEFuYWx5dGljc0RhdGEoYW5hbHl0aWNzT2JqKSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZXRlY3RzIGFuZCByZXR1cm5zIGEgc3VwcG9ydGVkIGFuYWx5dGljcyBvYmplY3QgaWYgb25lIGV4aXN0cy5cbiAgICpcbiAgICogQG1ldGhvZCBnZXRBbmFseXRpY3NPYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fGJvb2x9XG4gICAqL1xuICBmdW5jdGlvbiBnZXRBbmFseXRpY3NPYmplY3QoKSB7XG4gICAgdmFyIG9iaiA9IGZhbHNlO1xuICAgIC8vIGRldGVjdCBHVEFHLCBHVE0sIEdBIGluIHRoYXQgb3JkZXIuXG5cdGlmICh3aW5kb3cuZ3RhZykge1xuICAgICAgb2JqID0gd2luZG93Lmd0YWc7XG4gICAgICBvYmouX193bF90eXBlID0gXCJndGFnXCI7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuZGF0YUxheWVyKSB7XG4gICAgICBvYmogPSB3aW5kb3cuZGF0YUxheWVyO1xuICAgICAgb2JqLl9fd2xfdHlwZSA9IFwiZ3RtXCI7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuZ2EpIHtcbiAgICAgIG9iaiA9IHdpbmRvdy5nYTtcbiAgICAgIG9iai5fX3dsX3R5cGUgPSBcImdhXCI7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuX19nYVRyYWNrZXIpIHtcbiAgICAgIG9iaiA9IHdpbmRvdy5fX2dhVHJhY2tlcjtcbiAgICAgIG9iai5fX3dsX3R5cGUgPSBcImdhXCI7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coIGBGb3VuZCBhICR7b2JqLl9fd2xfdHlwZX0gYW5hbHl0aWNzIG9iamVjdC5gICk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBwZXIgZnVuY3Rpb24gZm9yIHB1c2hpbmcgZW50aXR5IGFuYWx5dGljcyBkYXRhIHRvIGdhIHN0eWxlIHRyYWNrZXIuXG4gICAqXG4gICAqIEBtZXRob2Qgc2VuZEdhRXZlbnRcbiAgICogQHBhcmFtICB7Z2F9IGFuYWx5dGljc09iamVjdCBUaGUgYW5seXRpY3Mgb2JqZWN0IHdlIHB1c2ggaW50by5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBkaW1YIHRoZSBuYW1lIG9mIHRoZSBmaXJzdCBjdXN0b20gZGltZW5zaW9uLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGRpbVkgdGhlIG5hbWUgb2YgdGhlIHNlY29uZCBjdXN0b20gZGltZW5zaW9uLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGxhYmVsIGEgc3RyaW5nIHRvIHVzZSBhcyB0aGUgbGFiZWwuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJpIHRoZSB1cmkgb2YgdGhpcyBlbnRpdHkuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSB0aGUgZW50aXR5IHR5cGUuXG4gICAqL1xuICBmdW5jdGlvbiBzZW5kR2FFdmVudChhbmFseXRpY3NPYmosIGRpbVgsIGRpbVksIGxhYmVsLCB1cmksIHR5cGUpIHtcbiAgICAvLyBEb3VibGUgY2hlY2sgd2UgaGF2ZSB0aGUgY29uZmlnIG9iamVjdCBiZWZvcmUgY29udGludWluZy5cbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdvcmRsaWZ0QW5hbHl0aWNzQ29uZmlnRGF0YSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhbmFseXRpY3NPYmooXCJzZW5kXCIsIFwiZXZlbnRcIiwgXCJXb3JkTGlmdFwiLCBcIk1lbnRpb25zXCIsIGxhYmVsLCAxLCB7XG4gICAgICBbZGltWF06IHVyaSxcbiAgICAgIFtkaW1ZXTogdHlwZSxcbiAgICAgIG5vbkludGVyYWN0aW9uOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHBlciBmdW5jdGlvbiBmb3IgcHVzaGluZyBlbnRpdHkgYW5hbHl0aWNzIGRhdGEgdG8gZ3RhZy5cbiAgICpcbiAgICogQG1ldGhvZCBzZW5kR3RhZ0V2ZW50XG4gICAqIEBwYXJhbSAge2d0YWd9IGFuYWx5dGljc09iamVjdCBUaGUgYW5seXRpY3Mgb2JqZWN0IHdlIHB1c2ggaW50by5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBkaW1YIHRoZSBuYW1lIG9mIHRoZSBmaXJzdCBjdXN0b20gZGltZW5zaW9uLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGRpbVkgdGhlIG5hbWUgb2YgdGhlIHNlY29uZCBjdXN0b20gZGltZW5zaW9uLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGxhYmVsIGEgc3RyaW5nIHRvIHVzZSBhcyB0aGUgbGFiZWwuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJpIHRoZSB1cmkgb2YgdGhpcyBlbnRpdHkuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSB0aGUgZW50aXR5IHR5cGUuXG4gICAqL1xuICBmdW5jdGlvbiBzZW5kR3RhZ0V2ZW50KGFuYWx5dGljc09iaiwgZGltWCwgZGltWSwgbGFiZWwsIHVyaSwgdHlwZSkge1xuICAgIC8vIERvdWJsZSBjaGVjayB3ZSBoYXZlIHRoZSBjb25maWcgb2JqZWN0IGJlZm9yZSBjb250aW51aW5nLlxuICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd29yZGxpZnRBbmFseXRpY3NDb25maWdEYXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coXCJTZW5kaW5nIGd0YWcgZXZlbnQgLi4uXCIpO1xuXG4gICAgYW5hbHl0aWNzT2JqKFwiZXZlbnRcIiwgXCJNZW50aW9uc1wiLCB7XG4gICAgICBldmVudF9jYXRlZ29yeTogXCJXb3JkTGlmdFwiLFxuICAgICAgZXZlbnRfbGFiZWw6IGxhYmVsLFxuICAgICAgdmFsdWU6IDEsXG4gICAgICBbZGltWF06IHVyaSxcbiAgICAgIFtkaW1ZXTogdHlwZSxcbiAgICAgIG5vbl9pbnRlcmFjdGlvbjogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBwZXIgZnVuY3Rpb24gZm9yIHB1c2hpbmcgZW50aXR5IGFuYWx5dGljcyBkYXRhIHRvIGd0YWcuXG4gICAqXG4gICAqIEBtZXRob2Qgc2VuZEd0YWdFdmVudFxuICAgKiBAcGFyYW0gIHtndGFnfSBhbmFseXRpY3NPYmplY3QgVGhlIGFubHl0aWNzIG9iamVjdCB3ZSBwdXNoIGludG8uXG4gICAqIEBwYXJhbSAge3N0cmluZ30gZGltWCB0aGUgbmFtZSBvZiB0aGUgZmlyc3QgY3VzdG9tIGRpbWVuc2lvbi5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBkaW1ZIHRoZSBuYW1lIG9mIHRoZSBzZWNvbmQgY3VzdG9tIGRpbWVuc2lvbi5cbiAgICogQHBhcmFtICB7c3RyaW5nfSBsYWJlbCBhIHN0cmluZyB0byB1c2UgYXMgdGhlIGxhYmVsLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHVyaSB0aGUgdXJpIG9mIHRoaXMgZW50aXR5LlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGUgdGhlIGVudGl0eSB0eXBlLlxuICAgKi9cbiAgZnVuY3Rpb24gc2VuZEd0bUV2ZW50KGFuYWx5dGljc09iaiwgZGltWCwgZGltWSwgbGFiZWwsIHVyaSwgdHlwZSkge1xuICAgIC8vIERvdWJsZSBjaGVjayB3ZSBoYXZlIHRoZSBjb25maWcgb2JqZWN0IGJlZm9yZSBjb250aW51aW5nLlxuICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd29yZGxpZnRBbmFseXRpY3NDb25maWdEYXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coXCJTZW5kaW5nIGd0bSBldmVudC4uLlwiKTtcblxuICAgIGFuYWx5dGljc09iai5wdXNoKHtcbiAgICAgIFwiZXZlbnRcIjogICAgICAgICAgICAgXCJNZW50aW9uc1wiLFxuICAgICAgXCJ3bF9ldmVudF9hY3Rpb25cIjogICBcIk1lbnRpb25zXCIsXG4gICAgICBcIndsX2V2ZW50X2NhdGVnb3J5XCI6IFwiV29yZExpZnRcIixcbiAgICAgIFwid2xfZXZlbnRfbGFiZWxcIjogICAgbGFiZWwsXG4gICAgICBcIndsX2V2ZW50X3ZhbHVlXCI6ICAgIDEsXG4gICAgICBcIndsX2V2ZW50X3VyaVwiOiAgICAgIHVyaSxcblx0ICBcIndsX2luZGV4X3VyaVwiOiAgICAgIGRpbVgucmVwbGFjZSggL15cXEQrL2csICcnICksXG4gICAgICBcIndsX2V2ZW50X3R5cGVcIjogICAgIHR5cGUsXG5cdCAgXCJ3bF9pbmRleF90eXBlXCI6ICAgICBkaW1ZLnJlcGxhY2UoIC9eXFxEKy9nLCAnJyApLFxuXHQgIFwibm9uX2ludGVyYWN0aW9uXCI6ICAgdHJ1ZVxuICAgIH0pO1xuICB9XG59KSgpO1xuIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCBcIi4vYW5hbHl0aWNzXCI7XG5cbi8vIFNldCBhIHJlZmVyZW5jZSB0byB0aGUgV29yZExpZnQgc2V0dGluZ3MuXG5jb25zdCBzZXR0aW5ncyA9IHdpbmRvdy53bFNldHRpbmdzO1xuXG4vKipcbiAqIEJ1aWxkIHRoZSByZXF1ZXN0IFVSTCwgaW5jbHVzaXZlIG9mIHRoZSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVycy5cbiAqXG4gKiBAc2luY2UgMy4xOS4xXG4gKlxuICogQHBhcmFtIHBhcmFtcyB7e2pzb25sZF91cmwsIHBvc3RJZCwgaXNIb21lfX0gVGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVxdWVzdCBVUmwuXG4gKi9cbmNvbnN0IGJ1aWxkVXJsID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIC8vIEpvaW4gd2l0aCBgP2Agb3IgYCZgLlxuICAgIC8vIGNvbnN0IGpvaW5DaGFyID0gMCA8PSBwYXJhbXMuYXBpVXJsLmluZGV4T2YoXCI/XCIpID8gXCImXCIgOiBcIj9cIjtcblxuICAgIC8vIEJ1aWxkIHRoZSBVUkxcbiAgICBjb25zdCB1cmwgPSBwYXJhbXNbJ2pzb25sZF91cmwnXSArICggXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHBhcmFtcy5pc0hvbWUgPyAwIDogcGFyYW1zLnBvc3RJZCApO1xuICAgICAgICAvLyBwYXJhbXNbJ2pzb25sZF91cmwnXSArXG4gICAgICAgIC8vIC8vIGpvaW5DaGFyICtcbiAgICAgICAgLy8gLy8gXCJhY3Rpb249d2xfanNvbmxkXCIgK1xuICAgICAgICAvLyAvLyBBcHBlbmQgdGhlIHBvc3QgaWQgcGFyYW1ldGVyLlxuICAgICAgICAvLyAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHBhcmFtcy5wb3N0SWQgPyBcIiZpZD1cIiArIHBhcmFtcy5wb3N0SWQgOiBcIlwiKSArXG4gICAgICAgIC8vIC8vIEFwcGVuZCB0aGUgaG9tZXBhZ2UgcGFyYW1ldGVyLlxuICAgICAgICAvLyAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHBhcmFtcy5pc0hvbWUgPyBcIiZob21lcGFnZT10cnVlXCIgOiBcIlwiKTtcblxuICAgIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIExvYWQgdGhlIEpTT04tTEQuXG4gKlxuICogQHNpbmNlIDMuMC4wXG4gKi9cbmNvbnN0IGxvYWRKc29uTGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQmFpbCBvdXQgaXQgdGhlIGNvbnRhaW5lciBkb2Vzbid0IG5vdyBhYm91dCBmZXRjaC5cbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGZldGNoKSByZXR1cm47XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgSlNPTi1MRCBpcyBkaXNhYmxlZCwgaS5lLiBpZiB0aGVyZSdzIGEgYGpzb25sZF9lbmFibGVkYFxuICAgIC8vIHNldHRpbmcgZXhwbGljaXRseSBkZWZpbmVkIHdpdGggYSB2YWx1ZSBkaWZmZXJlbnQgZnJvbSAnMScuXG4gICAgaWYgKFxuICAgICAgICBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2Ygc2V0dGluZ3NbXCJqc29ubGRfZW5hYmxlZFwiXSAmJlxuICAgICAgICBcIjFcIiAhPT0gc2V0dGluZ3NbXCJqc29ubGRfZW5hYmxlZFwiXVxuICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhhdCB3ZSBoYXZlIGEgcG9zdCBpZCBvciBpdCdzIGhvbWVwYWdlLCBvdGhlcndpc2UgZXhpdC5cbiAgICBpZiAoXG4gICAgICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBzZXR0aW5ncy5wb3N0SWQgJiZcbiAgICAgICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHNldHRpbmdzLmlzSG9tZVxuICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSByZXF1ZXN0IFVSTC5cbiAgICBjb25zdCB1cmwgPSBidWlsZFVybChzZXR0aW5ncyk7XG5cbiAgICAvLyBGaW5hbGx5IGZldGNoIHRoZSBVUkwuXG4gICAgLy9cbiAgICAvLyBETyBOT1QgdXNlIGhlcmUgYG5ldyBVUkwoLi4uKWAgLyBgVVJMLnNlYXJjaFBhcmFtc2A6IEdvb2dsZSBTRFRUIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGVtLlxuICAgIGZldGNoKHVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICAgICAgLy8gVXNlIGBkb2N1bWVudC5jcmVhdGVFbGVtZW50YC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbnNpZGVvdXQxMC93b3JkbGlmdC1wbHVnaW4vaXNzdWVzLzgxMC5cbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQudHlwZSA9IFwiYXBwbGljYXRpb24vbGQranNvblwiO1xuICAgICAgICAgICAgc2NyaXB0LmlubmVyVGV4dCA9IGJvZHk7XG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH0pO1xufTtcblxubG9hZEpzb25MZCgpO1xuXG4vL1xuLy8gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxvYWRKc29uTGQpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///98\n')}});