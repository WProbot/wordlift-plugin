!function(n){var B={};function i(I){if(B[I])return B[I].exports;var Q=B[I]={i:I,l:!1,exports:{}};return n[I].call(Q.exports,Q,Q.exports,i),Q.l=!0,Q.exports}i.m=n,i.c=B,i.d=function(n,B,I){i.o(n,B)||Object.defineProperty(n,B,{enumerable:!0,get:I})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,B){if(1&B&&(n=i(n)),8&B)return n;if(4&B&&"object"==typeof n&&n&&n.__esModule)return n;var I=Object.create(null);if(i.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:n}),2&B&&"string"!=typeof n)for(var Q in n)i.d(I,Q,function(B){return n[B]}.bind(null,Q));return I},i.n=function(n){var B=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(B,"a",B),B},i.o=function(n,B){return Object.prototype.hasOwnProperty.call(n,B)},i.p="",i(i.s=118)}({118:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(119);\n/* harmony import */ var _analytics__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_analytics__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Internal dependencies.\n */\n // Set a reference to the WordLift settings.\n\nvar settings = window.wlSettings;\n/**\n * Build the request URL, inclusive of the query string parameters.\n *\n * @since 3.19.1\n *\n * @param params {{apiUrl, postId, isHome}} The query parameters.\n * @returns {string} The request URl.\n */\n\nvar buildUrl = function buildUrl(params) {\n  // Join with `?` or `&`.\n  var joinChar = 0 <= params.apiUrl.indexOf("?") ? "&" : "?"; // Build the URL\n\n  var url = params.apiUrl + joinChar + "action=wl_jsonld" + ( // Append the post id parameter.\n  "undefined" !== typeof params.postId ? "&id=" + params.postId : "") + ( // Append the homepage parameter.\n  "undefined" !== typeof params.isHome ? "&homepage=true" : "");\n  return url;\n};\n/**\n * Load the JSON-LD.\n *\n * @since 3.0.0\n */\n\n\nvar loadJsonLd = function loadJsonLd() {\n  // Bail out it the container doesn\'t now about fetch.\n  if ("undefined" === typeof fetch) return; // Check if the JSON-LD is disabled, i.e. if there\'s a `jsonld_enabled`\n  // setting explicitly defined with a value different from \'1\'.\n\n  if ("undefined" !== typeof settings["jsonld_enabled"] && "1" !== settings["jsonld_enabled"]) {\n    return;\n  } // Check that we have a post id or it\'s homepage, otherwise exit.\n\n\n  if ("undefined" === typeof settings.postId && "undefined" === typeof settings.isHome) {\n    return;\n  } // Get the request URL.\n\n\n  var url = buildUrl(settings); // Finally fetch the URL.\n  //\n  // DO NOT use here `new URL(...)` / `URL.searchParams`: Google SDTT doesn\'t understand them.\n\n  fetch(url).then(function (response) {\n    return response.text();\n  }).then(function (body) {\n    // Use `document.createElement`. See https://github.com/insideout10/wordlift-plugin/issues/810.\n    var script = document.createElement("script");\n    script.type = "application/ld+json";\n    script.innerText = body;\n    document.head.appendChild(script);\n  });\n};\n\nloadJsonLd(); //\n// window.addEventListener("load", loadJsonLd);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUHVibGljL2luZGV4LmpzPzgxYmEiXSwibmFtZXMiOlsic2V0dGluZ3MiLCJ3aW5kb3ciLCJ3bFNldHRpbmdzIiwiYnVpbGRVcmwiLCJwYXJhbXMiLCJqb2luQ2hhciIsImFwaVVybCIsImluZGV4T2YiLCJ1cmwiLCJwb3N0SWQiLCJpc0hvbWUiLCJsb2FkSnNvbkxkIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwiYm9keSIsInNjcmlwdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJpbm5lclRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Q0FLQTs7QUFDQSxJQUFNQSxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsVUFBeEI7QUFFQTs7Ozs7Ozs7O0FBUUEsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU0MsTUFBVCxFQUFpQjtBQUNoQztBQUNBLE1BQU1DLFFBQVEsR0FBRyxLQUFLRCxNQUFNLENBQUNFLE1BQVAsQ0FBY0MsT0FBZCxDQUFzQixHQUF0QixDQUFMLEdBQWtDLEdBQWxDLEdBQXdDLEdBQXpELENBRmdDLENBSWhDOztBQUNBLE1BQU1DLEdBQUcsR0FDUEosTUFBTSxDQUFDRSxNQUFQLEdBQ0FELFFBREEsR0FFQSxrQkFGQSxLQUdBO0FBQ0Msa0JBQWdCLE9BQU9ELE1BQU0sQ0FBQ0ssTUFBOUIsR0FBdUMsU0FBU0wsTUFBTSxDQUFDSyxNQUF2RCxHQUFnRSxFQUpqRSxNQUtBO0FBQ0Msa0JBQWdCLE9BQU9MLE1BQU0sQ0FBQ00sTUFBOUIsR0FBdUMsZ0JBQXZDLEdBQTBELEVBTjNELENBREY7QUFTQSxTQUFPRixHQUFQO0FBQ0QsQ0FmRDtBQWlCQTs7Ozs7OztBQUtBLElBQU1HLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDNUI7QUFDQSxNQUFJLGdCQUFnQixPQUFPQyxLQUEzQixFQUFrQyxPQUZOLENBSTVCO0FBQ0E7O0FBQ0EsTUFDRSxnQkFBZ0IsT0FBT1osUUFBUSxDQUFDLGdCQUFELENBQS9CLElBQ0EsUUFBUUEsUUFBUSxDQUFDLGdCQUFELENBRmxCLEVBR0U7QUFDQTtBQUNELEdBWDJCLENBYTVCOzs7QUFDQSxNQUNFLGdCQUFnQixPQUFPQSxRQUFRLENBQUNTLE1BQWhDLElBQ0EsZ0JBQWdCLE9BQU9ULFFBQVEsQ0FBQ1UsTUFGbEMsRUFHRTtBQUNBO0FBQ0QsR0FuQjJCLENBcUI1Qjs7O0FBQ0EsTUFBTUYsR0FBRyxHQUFHTCxRQUFRLENBQUNILFFBQUQsQ0FBcEIsQ0F0QjRCLENBd0I1QjtBQUNBO0FBQ0E7O0FBQ0FZLE9BQUssQ0FBQ0osR0FBRCxDQUFMLENBQ0dLLElBREgsQ0FDUSxVQUFTQyxRQUFULEVBQW1CO0FBQ3ZCLFdBQU9BLFFBQVEsQ0FBQ0MsSUFBVCxFQUFQO0FBQ0QsR0FISCxFQUlHRixJQUpILENBSVEsVUFBU0csSUFBVCxFQUFlO0FBQ25CO0FBQ0EsUUFBTUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBRixVQUFNLENBQUNHLElBQVAsR0FBYyxxQkFBZDtBQUNBSCxVQUFNLENBQUNJLFNBQVAsR0FBbUJMLElBQW5CO0FBQ0FFLFlBQVEsQ0FBQ0ksSUFBVCxDQUFjQyxXQUFkLENBQTBCTixNQUExQjtBQUNELEdBVkg7QUFXRCxDQXRDRDs7QUF3Q0FOLFVBQVUsRyxDQUVWO0FBQ0EiLCJmaWxlIjoiMTE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCBcIi4vYW5hbHl0aWNzXCI7XG5cbi8vIFNldCBhIHJlZmVyZW5jZSB0byB0aGUgV29yZExpZnQgc2V0dGluZ3MuXG5jb25zdCBzZXR0aW5ncyA9IHdpbmRvdy53bFNldHRpbmdzO1xuXG4vKipcbiAqIEJ1aWxkIHRoZSByZXF1ZXN0IFVSTCwgaW5jbHVzaXZlIG9mIHRoZSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVycy5cbiAqXG4gKiBAc2luY2UgMy4xOS4xXG4gKlxuICogQHBhcmFtIHBhcmFtcyB7e2FwaVVybCwgcG9zdElkLCBpc0hvbWV9fSBUaGUgcXVlcnkgcGFyYW1ldGVycy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZXF1ZXN0IFVSbC5cbiAqL1xuY29uc3QgYnVpbGRVcmwgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgLy8gSm9pbiB3aXRoIGA/YCBvciBgJmAuXG4gIGNvbnN0IGpvaW5DaGFyID0gMCA8PSBwYXJhbXMuYXBpVXJsLmluZGV4T2YoXCI/XCIpID8gXCImXCIgOiBcIj9cIjtcblxuICAvLyBCdWlsZCB0aGUgVVJMXG4gIGNvbnN0IHVybCA9XG4gICAgcGFyYW1zLmFwaVVybCArXG4gICAgam9pbkNoYXIgK1xuICAgIFwiYWN0aW9uPXdsX2pzb25sZFwiICtcbiAgICAvLyBBcHBlbmQgdGhlIHBvc3QgaWQgcGFyYW1ldGVyLlxuICAgIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgcGFyYW1zLnBvc3RJZCA/IFwiJmlkPVwiICsgcGFyYW1zLnBvc3RJZCA6IFwiXCIpICtcbiAgICAvLyBBcHBlbmQgdGhlIGhvbWVwYWdlIHBhcmFtZXRlci5cbiAgICAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHBhcmFtcy5pc0hvbWUgPyBcIiZob21lcGFnZT10cnVlXCIgOiBcIlwiKTtcblxuICByZXR1cm4gdXJsO1xufTtcblxuLyoqXG4gKiBMb2FkIHRoZSBKU09OLUxELlxuICpcbiAqIEBzaW5jZSAzLjAuMFxuICovXG5jb25zdCBsb2FkSnNvbkxkID0gZnVuY3Rpb24oKSB7XG4gIC8vIEJhaWwgb3V0IGl0IHRoZSBjb250YWluZXIgZG9lc24ndCBub3cgYWJvdXQgZmV0Y2guXG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZmV0Y2gpIHJldHVybjtcblxuICAvLyBDaGVjayBpZiB0aGUgSlNPTi1MRCBpcyBkaXNhYmxlZCwgaS5lLiBpZiB0aGVyZSdzIGEgYGpzb25sZF9lbmFibGVkYFxuICAvLyBzZXR0aW5nIGV4cGxpY2l0bHkgZGVmaW5lZCB3aXRoIGEgdmFsdWUgZGlmZmVyZW50IGZyb20gJzEnLlxuICBpZiAoXG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHNldHRpbmdzW1wianNvbmxkX2VuYWJsZWRcIl0gJiZcbiAgICBcIjFcIiAhPT0gc2V0dGluZ3NbXCJqc29ubGRfZW5hYmxlZFwiXVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDaGVjayB0aGF0IHdlIGhhdmUgYSBwb3N0IGlkIG9yIGl0J3MgaG9tZXBhZ2UsIG90aGVyd2lzZSBleGl0LlxuICBpZiAoXG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHNldHRpbmdzLnBvc3RJZCAmJlxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBzZXR0aW5ncy5pc0hvbWVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gR2V0IHRoZSByZXF1ZXN0IFVSTC5cbiAgY29uc3QgdXJsID0gYnVpbGRVcmwoc2V0dGluZ3MpO1xuXG4gIC8vIEZpbmFsbHkgZmV0Y2ggdGhlIFVSTC5cbiAgLy9cbiAgLy8gRE8gTk9UIHVzZSBoZXJlIGBuZXcgVVJMKC4uLilgIC8gYFVSTC5zZWFyY2hQYXJhbXNgOiBHb29nbGUgU0RUVCBkb2Vzbid0IHVuZGVyc3RhbmQgdGhlbS5cbiAgZmV0Y2godXJsKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oYm9keSkge1xuICAgICAgLy8gVXNlIGBkb2N1bWVudC5jcmVhdGVFbGVtZW50YC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbnNpZGVvdXQxMC93b3JkbGlmdC1wbHVnaW4vaXNzdWVzLzgxMC5cbiAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICBzY3JpcHQudHlwZSA9IFwiYXBwbGljYXRpb24vbGQranNvblwiO1xuICAgICAgc2NyaXB0LmlubmVyVGV4dCA9IGJvZHk7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSk7XG59O1xuXG5sb2FkSnNvbkxkKCk7XG5cbi8vXG4vLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgbG9hZEpzb25MZCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///118\n')},119:function(module,exports){eval('function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * A collection of functions and logic to handle sending of entity data to an\n * external analytics tracker.\n *\n * Objects: `ga`, `__gaTracker` are supported as is `gtag`.\n *\n * NOTE: the `__gaTracker` object is a common remap name in WordPress.\n */\n(function () {\n  // Only run after page has loaded.\n  document.addEventListener("DOMContentLoaded", function (event) {\n    // We should have an entity object by here but if not short circuit.\n    if (typeof wordliftAnalyticsEntityData === "undefined") {\n      return;\n    }\n    /**\n     * Promise to handle detection and return of an analytics object.\n     *\n     * @type {Promise}\n     */\n\n\n    var detectAnalyticsObject = new Promise(function (resolve, reject) {\n      var analyticsObj = getAnalyticsObject();\n      return resolve(analyticsObj);\n    });\n    /**\n     * A function returning the promise that deals with creating items\n     * to send and passing them to the correct send function.\n     *\n     * @method\n     * @param  {object} analyticsObj an analytics tracking object that is the resolve of the detect function.\n     * @return {Promise}\n     */\n\n    var sendAnalyticsData = function sendAnalyticsData(analyticsObj) {\n      return new Promise(function (resolve, reject) {\n        // if we dont have an object to push into and an object\n        // with config then this is a failure - reject.\n        if ("undefined" === typeof analyticsObj || "undefined" === typeof wordliftAnalyticsConfigData) {\n          return reject();\n        } // setup the custom dimention names.\n\n\n        var dimX = "dimension" + wordliftAnalyticsConfigData.entity_uri_dimension;\n        var dimY = "dimension" + wordliftAnalyticsConfigData.entity_type_dimension; // Create an array of all the individual entities.\n\n        var entities = [];\n\n        for (var key in wordliftAnalyticsEntityData) {\n          if (wordliftAnalyticsEntityData.hasOwnProperty(key)) {\n            entities.push(wordliftAnalyticsEntityData[key]);\n          }\n        } // Count the total entities we have to send.\n\n\n        var entitiesTotal = entities.length; // console.log( `Going to send analytics events using ${analyticsObj.__wl_type} object type.` );\n\n        /**\n         * Depending on the tracking object type send the data\n         * to the correspending service.\n         */\n\n        if ("ga" === analyticsObj.__wl_type) {\n          // This is `ga` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGaEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } else if ("gtag" === analyticsObj.__wl_type) {\n          // This is `gtag` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGtagEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } else if ("gtm" === analyticsObj.__wl_type) {\n          // This is `gtag` style object.\n          for (var i = 0; i < entitiesTotal; i++) {\n            sendGtmEvent(analyticsObj, dimX, dimY, entities[i].label, entities[i].uri, entities[i].type);\n          }\n        } // @TODO handle failure.\n        // resolve to finish.\n\n\n        return resolve(true);\n      });\n    }; // Fire off the promise chain to detect and send analytics data.\n\n\n    detectAnalyticsObject.then(function (analyticsObj) {\n      return sendAnalyticsData(analyticsObj);\n    });\n  });\n  /**\n   * Detects and returns a supported analytics object if one exists.\n   *\n   * @method getAnalyticsObject\n   * @return {object|bool}\n   */\n\n  function getAnalyticsObject() {\n    var obj = false; // detect GTAG, GTM, GA in that order.\n\n    if (window.gtag) {\n      obj = window.gtag;\n      obj.__wl_type = "gtag";\n    } else if (window.dataLayer) {\n      obj = window.dataLayer;\n      obj.__wl_type = "gtm";\n    } else if (window.ga) {\n      obj = window.ga;\n      obj.__wl_type = "ga";\n    } else if (window.__gaTracker) {\n      obj = window.__gaTracker;\n      obj.__wl_type = "ga";\n    } // console.log( `Found a ${obj.__wl_type} analytics object.` );\n\n\n    return obj;\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to ga style tracker.\n   *\n   * @method sendGaEvent\n   * @param  {ga} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGaEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    var _analyticsObj;\n\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    }\n\n    analyticsObj("send", "event", "WordLift", "Mentions", label, 1, (_analyticsObj = {}, _defineProperty(_analyticsObj, dimX, uri), _defineProperty(_analyticsObj, dimY, type), _defineProperty(_analyticsObj, "nonInteraction", true), _analyticsObj));\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to gtag.\n   *\n   * @method sendGtagEvent\n   * @param  {gtag} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGtagEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    var _analyticsObj2;\n\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    } // console.log("Sending gtag event ...");\n\n\n    analyticsObj("event", "Mentions", (_analyticsObj2 = {\n      event_category: "WordLift",\n      event_label: label,\n      value: 1\n    }, _defineProperty(_analyticsObj2, dimX, uri), _defineProperty(_analyticsObj2, dimY, type), _defineProperty(_analyticsObj2, "non_interaction", true), _analyticsObj2));\n  }\n  /**\n   * Wrapper function for pushing entity analytics data to gtag.\n   *\n   * @method sendGtagEvent\n   * @param  {gtag} analyticsObject The anlytics object we push into.\n   * @param  {string} dimX the name of the first custom dimension.\n   * @param  {string} dimY the name of the second custom dimension.\n   * @param  {string} label a string to use as the label.\n   * @param  {string} uri the uri of this entity.\n   * @param  {string} type the entity type.\n   */\n\n\n  function sendGtmEvent(analyticsObj, dimX, dimY, label, uri, type) {\n    // Double check we have the config object before continuing.\n    if ("undefined" === typeof wordliftAnalyticsConfigData) {\n      return false;\n    } // console.log("Sending gtm event...");\n\n\n    analyticsObj.push({\n      "event": "Mentions",\n      "wl_event_action": "Mentions",\n      "wl_event_category": "WordLift",\n      "wl_event_label": label,\n      "wl_event_value": 1,\n      "wl_event_uri": uri,\n      "wl_index_uri": dimX.replace(/^\\D+/g, \'\'),\n      "wl_event_type": type,\n      "wl_index_type": dimY.replace(/^\\D+/g, \'\'),\n      "non_interaction": true\n    });\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///119\n')}});