<?php
/**
 * This file defines the Analysis_Response_Ops_Test class providing the unit tests for the Analysis_Response_Ops class.
 *
 * @since 3.21.5
 * @author David Riccitelli <david@wordlift.io>
 * @package Wordlift\Analysis\Response
 */

namespace Wordlift\Analysis\Response;

use Exception;
use stdClass;

/**
 * Define the {@link Analysis_Response_Ops_Test} class.
 *
 * @since 3.21.5
 * @package Wordlift\Analysis\Response
 */
class Analysis_Response_Ops_Test extends \Wordlift_Unit_Test_Case {

	/**
	 * @var \Wordlift_Entity_Service
	 */
	private $entity_service;

	function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->entity_service = $this->get_wordlift_test()->get_entity_service();
	}

	/**
	 * Test that an exception is raised when the passed response is not an array.
	 *
	 * @expectedException Exception
	 * @expectedExceptionMessage `body` is required in response.
	 */
	public function test_response_not_an_array() {

		Analysis_Response_Ops::create_with_response( "something else" );

	}

	/**
	 * Test that an exception is raised when the passed response doesn't contain the `body` key.
	 *
	 * @expectedException Exception
	 * @expectedExceptionMessage `body` is required in response.
	 */
	public function test_response_array_without_body() {

		Analysis_Response_Ops::create_with_response( array() );

	}

	/**
	 * Test that an exception is raised when the `body` is null.
	 *
	 * @expectedException Exception
	 * @expectedExceptionMessage `body` is required in response.
	 */
	public function test_response_body() {

		Analysis_Response_Ops::create_with_response( array( 'body' => null ) );

	}

	/**
	 * Test the `make_entities_local` function.
	 *
	 * In this test we create an entity with a remote sameAs, e.g. `http://example.org/xyz`. Then we build an
	 * Analysis Response with this entity along with one annotation which references the entity using the `entityMatches`
	 * property and we give it to the {@link Analysis_Response_Ops} instance.
	 *
	 * We then call  the `make_entities_local` function and we check that the entities key has been switched to the local
	 * URI and that the remote URI is set into the sameAs. We also check that the reference in the entityMatches is
	 * switched to the local URI.
	 *
	 * @since 3.21.5
	 */
	public function test_make_entities_local() {

		// Create the entity post.
		$post_id = $this->factory()->post->create( array(
			'post_type'   => 'entity',
			'post_status' => 'draft',
			'post_title' => 'Test Analysis Response Ops test_make_entities_local'
		) );

		// Get the local URI (generated by WLP) and a fake remote URI.
		$local_uri  = $this->entity_service->get_uri( $post_id );
		$remote_uri = "http://example.org/$post_id";

		// Assign the remote URI as sameAs.
		add_post_meta( $post_id, \Wordlift_Schema_Service::FIELD_SAME_AS, $remote_uri );

		// Build the response.
		$analysis_response                                            = new StdClass();
		$analysis_response->entities                                  = new StdClass();
		$analysis_response->entities->{$remote_uri}                   = new StdClass();
		$analysis_response->annotations                               = new StdClass();
		$analysis_response->annotations->{"urn:enhancement-12345678"} = new StdClass();
		$analysis_response->annotations->{"urn:enhancement-12345678"}
			->entityMatches                                           = array( new StdClass() );
		$analysis_response->annotations->{"urn:enhancement-12345678"}
			->entityMatches[0]->entityId                              = $remote_uri;

		// Create the Analysis_Response_Ops with the response.
		$ops = Analysis_Response_Ops::create_with_response(
			array( 'body' => json_encode( $analysis_response, JSON_UNESCAPED_UNICODE ) ) );

		// Make local and get the JSON.
		$json = json_decode( $ops->make_entities_local()->to_string(), true );

		$this->assertArrayHasKey( $local_uri, $json['entities'], 'The entities array must contain the local URI.' );
		$this->assertContains( $remote_uri, $json['entities'][ $local_uri ]['sameAs'], 'The sameAs array must contain the remote URI.' );
		$this->assertEquals( $local_uri, $json['annotations']['urn:enhancement-12345678']['entityMatches'][0]['entityId'], 'The entityId must match the local URI.' );

	}

//	public function test_response_1() {
//
//		$request  = file_get_contents( __DIR__ . '/assets/request_1.json' );
//		$request_json = json_decode( $request );
//		$response = file_get_contents( __DIR__ . '/assets/response_1.json' );
//		$response_json = json_decode( $response );
//
//		echo Analysis_Response_Ops::create( $response_json )
//		                          ->make_entities_local()
//		                          ->add_occurrences( $request_json->content )
//		                          ->to_string();
//	}

}
