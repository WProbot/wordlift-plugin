<?php
/**
 * This file provides the test for the Mappings feature.
 *
 * @since 3.25.0
 * @package Wordlift
 * @subpackage Wordlift/tests
 */

class Wordlift_Mappings_Test extends Wordlift_Unit_Test_Case {

	function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub

		// Try to get the ACF PRO Key, if not set, skip this test.
		$acf_pro_key = getenv( 'ACF_PRO_KEY' );
		if ( empty( $acf_pro_key ) ) {
			$this->markTestSkipped( '`ACF_PRO_KEY` not set, test skipped.' );
		}

		// Load the WP Filesystem.
		$wp_filesystem = $this->load_wp_filesystem();
		$this->assertNotNull( $wp_filesystem, 'We require a $wp_filesystem.' );

		// Download the ACF PRO package.
		$acf_download_url = "https://connect.advancedcustomfields.com/index.php?a=download&p=pro&k=$acf_pro_key";
		$response = wp_remote_get( $acf_download_url, array( 'timeout' => 60, ) );

		$wp_upload_dir        = wp_upload_dir();
		$upload_dir = $wp_upload_dir['basedir'] . $wp_upload_dir['subdir'];$acf_destination_path = $upload_dir . '/advanced-custom-fields-pro.zip';
		wp_mkdir_p( $upload_dir );

		// Store the data locally.
		$body = wp_remote_retrieve_body( $response );
		$this->assertFalse( is_wp_error( $response ) || ! isset( $response['body'] ), 'An error occurred: ' . var_export( $response, true ) );
		$result = $wp_filesystem->put_contents( $acf_destination_path, $body );

		$this->assertTrue( $result, "Unable to save ACF Pro to the local WordPress test install [ class name :: " . get_class( $wp_filesystem ) ." ][ url :: $acf_download_url ][ path :: $acf_destination_path ]." );


	}

	private function load_wp_filesystem() {

		// Required for REST API calls
		if ( ! function_exists( 'WP_Filesystem' ) ) {
			require_once( ABSPATH . 'wp-admin/includes/file.php' );
		}

		// Load `WP_Filesystem`.
		WP_Filesystem();
		global $wp_filesystem;

		return $wp_filesystem;
	}

	public function test() {


	}

}
