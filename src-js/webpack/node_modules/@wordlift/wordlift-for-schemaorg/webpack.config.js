const path = require("path");
const webpack = require("webpack");
const CleanWebpackPlugin = require("clean-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");

const config = {
  entry: ["whatwg-fetch", path.resolve(__dirname, "./src/index.js")],
  output: {
    filename: "wordlift-for-schemaorg.js",
    path: path.resolve(__dirname, "build")
  },
  devServer: {
    contentBase: [path.join(__dirname, "dist"), path.join(__dirname, "assets")]
  },
  devtool: "source-map",
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: "babel-loader?cacheDirectory",
          options: {
            presets: ["env", "react"],
            plugins: ["transform-object-rest-spread"]
          }
        }
      }
    ]
  },
  plugins: [
    new CleanWebpackPlugin(["dist"]),
    new HtmlWebpackPlugin({
      title: "Development",
      template: path.resolve(__dirname, "src/index.html")
    }),
    new webpack.DefinePlugin({})
  ]
};

/*
 * Customize the configuration on behalf of the current `mode`.
 * @see https://webpack.js.org/concepts/mode/
 */
module.exports = (env, argv) => {
  if (argv.mode === "development") {
    config.entry = [
      "whatwg-fetch",
      path.resolve(__dirname, "./src/index.dev.js")
    ];
  }

  if (argv.mode === "production") {
    config.output.library = "wordliftForSchemaOrg";
    config.output.libraryTarget = "umd";
    config.externals = [
      "react",
      "react-dom",
      "styled-components",
      "immutable",
      "whatwg-fetch",
      "prop-types"
    ];
  }

  return config;
};
